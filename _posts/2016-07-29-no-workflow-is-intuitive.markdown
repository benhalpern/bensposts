---
layout: post
title:  "No Workflow is Intuitive"
date:   2016-07-12 16:41:22 -0400
published: false
cover_image: "https://upload.wikimedia.org/wikipedia/commons/7/7d/Ur_chariot.jpg"
---
Jira tickets, GitHub issues, Trello cards, Git, pull requests, agile, scrum, yada yada yada. It's a lot of stuff that goes into developing software, especially developing software collaboratively, and none of it is universally intuitive, but it is sometimes treated that way. The ratio of talking about these things to explaining these things can get way out of line. It can be embarrassing to speak up and say "I don't know how GitHub issues work," which is kind of crazy considering it's an arbitrary pattern with super specific flows that are not inherent to intelligence or experience or anything. I don't think a lot of developers get formal training in these subjects, nor should they, because for the most part, because these are just implementation details in collaborative software development.

Because software development, in the long run, is more about applying principles than it is about strict adherence to guidelines, there is a lot of flow in process and use of metaphors rather than concretions. The clay never dries in pragmatic software development so we never get to sit back and lecture on any meaningfully concrete concepts. Because of this shifting nature and the desire to keep things high level and abstract, some of these workflow practices can go completely unlearned depending on the circumstances that lead up to the present for the individual developer. I, personally, have a vague understanding of what Jira even is. I have never used it. I could nod along in a social context about what it's deal is, but I really don't know. To some extent I could learn about all the workflow practices out there, but that seems boring as fuck to me and I just want to get back to writing code. But I often find people talk about what it is they're doing as if it is somehow intuitive, universally understood, or totally mainstream. None of it is. Everyone's circumstance is totally different and nothing you've done is "the way it is done". This is more common in our industry than others, which deal in greater timespans, and less fluid landscapes. Construction practices, while always ripe for "disruption" in theory, are not wishy-washy like everything we do in code.

In programming we rely on wacky notions of pseudo-consensus and it can be easy to catch some of the waves while completely missing others, even when they are all equally "mainstream." This applies to the software itself, like working with databases vs UI design. We struggle with this unacceptance of non-shared circumstances somewhat, but we tend to accept a bit better
